# This is a workflow to onboard offerings to the IBM Cloud catalog.

name: ibm-cloud-catalog-onboard

# Controls when the workflow will run
on:
  # Triggers the workflow on the push of a tag with the belief that a new tag is be associcated to a new release.  The tag is 
  # expected to be of the form "vXX.XX.XX" but this could be adapted to any convention.
  push:
    tags:
    - 'v*' 
  workflow_dispatch: 
jobs:
  # This workflow contains a single job called "onbaord-release"
  onboard-release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Extracts the offering version number from the tag which is assumed to be of the format "vXX.XX.XX"
      - name: Determine version 
        run: echo "VERSION=$(echo ${{ github.ref_name }} | cut -c2-)" >> $GITHUB_ENV

      # For debugging - echo all the environment variables in sorted order
      - name: Dump environment
        run: env | sort

      # For debugging - echo the git context and all properties
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"   

      # Create the tar.gz file that will be uploaded to the release and catalog
      - name: Create release asset for 000-account-setup
        run: |
          ls
          cd 000-ibm-fs-account-setup
          cd terraform
          cp ../../README.md .
          echo 'creating asset for 000-ibm-fs-account-setup - ${{ github.ref_name }}-000-ibm-fs-account-setup-catalog.tar.gz'
          tar -czvf ../${{ github.ref_name }}-000-ibm-fs-account-setup-catalog.tar.gz .
          echo 'done creating asset for 000-ibm-fs-account-setup'          

      # Create the release in the repo
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ""
          draft: true
          prerelease: false  

      # Upload a release asset to the repo on the newly created release
      - name: Upload Release Asset - 000-ibm-fs-account-setup
        id: ibm-fs-account-setup-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./000-account-setup/${{ github.ref_name }}-000-ibm-fs-account-setup-catalog.tar.gz
          asset_name: ${{ github.ref_name }}-000-ibm-fs-account-setup-catalog.tar.gz
          asset_content_type: application/octet-stream

      # Import new offering versions to the IBM catalog.  Need to first install the CLI, catalog management plugin then use the CLI to 
      # import the version to the offering and validate it.
      - name: Upload to cloud catalog
        id: setup-cli-and-upload
        env: 
          IBMCLOUD_API_KEY: ${{ secrets.API_KEY }}
        run: |
          curl -sL https://ibm.biz/idt-installer | bash
          ibmcloud plugin install catalogs-management
          ibmcloud plugin install schematics
          ibmcloud plugin list
          ibmcloud login --apikey "$IBMCLOUD_API_KEY" --no-region

          VERSION=${{ env.VERSION }}

          catalogName="Tech Zone FS Cloud Catalog"
          RND=$RANDOM
          EDGE_PREFIX="edge-"$RND
          MGMT_PREFIX="base-"$RND

          echo "--------------------------------------------------------------------"
          echo "000: onboard version, validate, publish"
          offeringName="Ecosystem Account Setup - 000"
          # format offering validation values into json format
          jq -n --arg IBMCLOUD_API_KEY "$IBMCLOUD_API_KEY" '{ "ibmcloud_api_key": $IBMCLOUD_API_KEY, "region": "us-east" }' > valid-values.json  
          # import the version into the catalog and run schematics validation 
          $RESOURCE_GROUP="cm-validate"
          ./scripts/onboard_validate_publish.sh "$catalogName" "$offeringName" ${{ steps.account-setup-asset.outputs.browser_download_url }} ${{ env.VERSION }} "$RESOURCE_GROUP"

          echo "--------------------------------------------------------------------"
          echo "   Begin resource cleanup "
          echo "--------------------------------------------------------------------"

          echo "--------------------------------------------------------------------"
          echo "000: destroy"
          offeringName="Ecosystem Account Setup - 000"
          # get the schematics workspace id that was used for the validation of this version
          workspaceID=$(ibmcloud catalog offering get -c "$catalogName" -o "$offeringName" --output json | jq -r --arg version "${{ env.VERSION }}" '.kinds[] | select(.format_kind=="terraform").versions[] | select(.version==$version).validation.target.workspace_id')
          ./scripts/cleanup.sh "$workspaceID"
